#!/bin/bash

generate_radvd () {
	LAN_INTERFACE="$1"
	PREFIX="$2"
	cat << EOF
# Generated by ipv6conf
interface ${LAN_INTERFACE} {
  AdvSendAdvert on;
  MinRtrAdvInterval 3;
  MaxRtrAdvInterval 10;
  prefix ${PREFIX} {
    AdvOnLink on;
    AdvAutonomous on;
    AdvRouterAddr on;
  };
};
EOF
}

generate_ndppd () {
	WAN_INTERFACE="$1"
	LAN_INTERFACE="$2"
	PREFIX="$3"
	cat <<EOF
proxy ${WAN_INTERFACE} {
	autowire yes
	rule ${PREFIX} {
		iface ${LAN_INTERFACE}
	}
}
EOF
}

generate_interface_lan () {
	LAN_INTERFACE="$1"
	PREFIX="$2"
	HIGH=$(echo $PREFIX | awk -F '::/' '{print $1}')
	LENGTH=$(echo $PREFIX | awk -F '::/' '{print $2}')
	cat <<EOF
# Generated by ipv6conf
iface ${LAN_INTERFACE} inet6 static
	address		${HIGH}::1/${LENGTH}
EOF
}

generate_openvpn () {
	MOTHER_PREFIX="$1"
	OVPN_PREFIX_LENGTH="$2"  # Currently only support <= 80
	BUFFER=$(echo ${MOTHER_PREFIX} | awk -F '::/' '{print $1}')
	NEW_PREFIX="${BUFFER}:ffff::/${OVPN_PREFIX_LENGTH}"
	echo "# Generated by ipv6conf"
	echo "server-ipv6 ${NEW_PREFIX}"
}

generate_bind () {
	PREFIX="$1"
	BUFFER=$(echo ${MOTHER_PREFIX} | awk -F '::/' '{print $1}')
	LISTEN_ADDRESS="${BUFFER}::1"
	echo "# Generated by ipv6conf"
	echo "listen-on-v6 { ${LISTEN_ADDRESS}; };"
}

generate_sniproxy () {
	PREFIX="$1"
	BUFFER=$(echo ${MOTHER_PREFIX} | awk -F '::/' '{print $1}')
	LISTEN_ADDRESS="${BUFFER}::1"
	cat <<EOF
# Generated by ipv6conf
resolver {
    nameserver ${LISTEN_ADDRESS}
    mode ipv6_only
}

access_log {
    filename /var/log/sniproxy_access.log
}

listen [${LISTEN_ADDRESS}]:80 {
    proto http
    table all
    source fdf3:e8e2:348e:5418::8
}

listen [${LISTEN_ADDRESS}]:443 {
    proto tls
    table all
    source fdf3:e8e2:348e:5418::8
}

table all {
    .* *
}
EOF
}

GET_PREFIX=$(rdisc6 -1 enp7s0 | grep Prefix | cut -d ':' -f2- | sed 's/^.//g')

WAN_INTERFACE="enp7s0"
LAN_INTERFACE="enp9s0"

OLD_PREFIX_FILE="/usr/local/network_config/ipv6conf.d/oldprefix"

FILE_RADVD="/etc/radvd.conf"
FILE_NDPPD="/etc/ndppd.conf"
FILE_INTERFACE_LAN="/etc/network/interfaces.d/30-lan-ipv6"
FILE_OVPN_IPV6="/srv/docker/openvpn/server_ipv6.conf"
FILE_BIND="/srv/docker/bind-cname/named.conf.listen-ipv6"
FILE_SNIPROXY="/srv/docker/sniproxy-ipv6/conf/sniproxy.conf"

if [[ -f "$OLD_PREFIX_FILE" ]]; then
	OLD_PREFIX=$(cat "$OLD_PREFIX_FILE")
fi

if [[ "$OLD_PREFIX" == "$GET_PREFIX" ]]; then
	exit 0
else
	systemctl restart dibbler-client.service
	generate_radvd "$LAN_INTERFACE" "$GET_PREFIX" > $FILE_RADVD
	systemctl restart radvd.service
	generate_ndppd "$WAN_INTERFACE" "$LAN_INTERFACE" "$GET_PREFIX" > $FILE_NDPPD
	systemctl restart ndppd.service
	/sbin/ifdown --ignore-errors $LAN_INTERFACE
	generate_interface_lan "$LAN_INTERFACE" "$GET_PREFIX" > $FILE_INTERFACE_LAN
	/sbin/ifup --ignore-errors $LAN_INTERFACE
	generate_openvpn "$GET_PREFIX" 80 > $FILE_OVPN_IPV6
	docker restart openvpn
	generate_bind "$GET_PREFIX" > $FILE_BIND
	docker restart bind-cname
	generate_sniproxy "$GET_PREFIX" > $FILE_SNIPROXY
	docker restart sniproxy-ipv6

	/usr/sbin/ip6tables -t nat -A POSTROUTING -s $GET_PREFIX -o $VPN -j MASQUERADE
	if [[ ! -z "$OLD_PREFIX" ]]; then
		/usr/sbin/ip6tables -t nat -D POSTROUTING -s $OLD_PREFIX -o grevpnhome -j MASQUERADE
		/usr/local/network_config/down-vpn-rule.sh "/usr/local/network_config/ipv6conf.d/oldprefix" $VPN
	fi
	/usr/sbin/ip6tables-save > /etc/iptables/rules.v6

	echo "$GET_PREFIX" > "$OLD_PREFIX_FILE"
	/usr/local/network_config/up-vpn-rule.sh "/usr/local/network_config/ipv6conf.d/oldprefix" $VPN 15000
fi
